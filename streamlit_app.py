import sys, io, json, time, os
from datetime import datetime, timezone
from typing import Optional, List, Dict, Any

import pandas as pd
import matplotlib.pyplot as plt  # –æ–∫, –ø—É—Å—Ç—å –æ—Å—Ç–∞–Ω–µ—Ç—Å—è –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
import streamlit as st
import tempfile
from multiagent_tracer.multiagent_tracer import MultiAgentTracer
#–∏–º–ø–æ—Ä—Ç –Ω–∞—à–µ–≥–æ –∞–≥–µ–Ω—Ç–∞-–∞–Ω–∞–ª–∏—Ç–∏–∫–∞
from llm_analytics import analyze_trace_bytes

# ------------------------------
# –°—Ç—Ä–∞–Ω–∏—Ü–∞ + –±–∞–∑–æ–≤—ã–π —Å—Ç–∏–ª—å
# ------------------------------
st.set_page_config(
    page_title="Tracing & Log Viz (by –º–ª)",
    page_icon="üï∏Ô∏è",
    layout="wide",
    initial_sidebar_state="expanded",
)

st.markdown("""
<style>
div.block-container { padding-top: 1.2rem; }
h1, h2, h3, .stMetric, .stMarkdown, .stCaption, .stSelectbox, .stDownloadButton {
  font-family: 'Inter', system-ui, -apple-system, Segoe UI, Roboto, 'Helvetica Neue', Arial, 'Noto Sans';
  letter-spacing: .2px;
}
.card { background: rgba(255,255,255,.55); border: 1px solid rgba(0,0,0,.06);
  border-radius: 16px; padding: 16px 18px; box-shadow: 0 6px 18px rgba(0,0,0,.06); }
[data-theme="dark"] .card { background: rgba(17,24,39,.55); border-color: rgba(255,255,255,.08); }
.stButton > button, .stDownloadButton > button { border-radius: 12px; padding: .55rem 1rem; border: 1px solid rgba(0,0,0,.08); }
.badge { display:inline-flex; align-items:center; gap:.4rem; padding:.15rem .55rem; border-radius:999px; font-size:.82rem;
  background:rgba(20,184,166,.12); color:#059669; border:1px solid rgba(5,150,105,.35); }
</style>
<link rel="preconnect" href="https://fonts.googleapis.com">
<link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&display=swap" rel="stylesheet">
""", unsafe_allow_html=True)

st.title("üõ∞Ô∏è Tracing & Log Viz (by –º–ª)")
st.caption("–õ—ë–≥–∫–∞—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è —Å–ø–∞–Ω–æ–≤ –∏ –ª–æ–≥–æ–≤ –¥–ª—è –≤–∞—à–µ–π –º—É–ª—å—Ç–∏–∞–≥–µ–Ω—Ç–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã")

# ------------------------------
# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è
# ------------------------------
ss = st.session_state
if "ma_tracer" not in ss:
    ss.ma_tracer = None
if "graph_mode" not in ss:
    ss.graph_mode = "Aggregated"
if "hide_http" not in ss:
    ss.hide_http = True
if "edge_width" not in ss:
    ss.edge_width = 2.2
if "arrow_size" not in ss:
    ss.arrow_size = 2.0
if "group_by" not in ss:
    ss.group_by = "agent_name"
if "include_types" not in ss:
    ss.include_types = ['orchestrator','search','analysis','report','clarification','tool']
if "limit_preview" not in ss:
    ss.limit_preview = 300
if "plot_height" not in ss:
    ss.plot_height = 950
if "label_font_size" not in ss:
    ss.label_font_size = 12

# –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
if "uploaded_buffers" not in ss:
    ss.uploaded_buffers = {}   # filename -> bytes
if "selected_file" not in ss:
    ss.selected_file = None

# –º–µ—Ç–∫–∏ LLM
if "llm_labels" not in ss:
    ss.llm_labels = {}         # agent_name -> True/False (approve)
if "show_approve" not in ss:
    ss.show_approve = True

# ------------------------------
# –£—Ç–∏–ª–∏—Ç–∞: –µ–¥–∏–Ω—ã–π —Å—Ç–∏–ª—å Plotly
# ------------------------------
def polish_plotly(fig):
    fig.update_layout(
        template="plotly_white",
        paper_bgcolor="rgba(0,0,0,0)",
        plot_bgcolor="rgba(0,0,0,0)",
        font=dict(family="Inter, sans-serif", size=12),
        margin=dict(l=40, r=40, t=40, b=40),
        hoverlabel=dict(bgcolor="white", font_size=12, font_family="Inter")
    )
    return fig

# ------------------------------
# –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–æ–≤
# ------------------------------
uploaded_files = st.file_uploader("–ó–∞–≥—Ä—É–∑–∏—Ç—å —Ñ–∞–π–ª—ã —Ç—Ä–∞—Å—Å (JSON)", accept_multiple_files=True, type="json")

if uploaded_files:
    for up in uploaded_files:
        if up.name not in ss.uploaded_buffers:
            ss.uploaded_buffers[up.name] = up.getvalue()
            st.success(f"–§–∞–π–ª –∑–∞–≥—Ä—É–∂–µ–Ω: {up.name}")

# –í—ã–±–æ—Ä —Ñ–∞–π–ª–∞
if ss.uploaded_buffers:
    ss.selected_file = st.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞", options=list(ss.uploaded_buffers.keys()))

# –§–æ—Ä–º–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –∏ –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –≥—Ä–∞—Ñ–∞
with st.sidebar:
    st.subheader("‚öôÔ∏è –ü–∞—Ä–∞–º–µ—Ç—Ä—ã")
    with st.form(key="viz_params"):
        graph_mode = st.radio("–†–µ–∂–∏–º –≥—Ä–∞—Ñ–∞", ["Aggregated","Invocations"], index=(0 if ss.graph_mode=="Aggregated" else 1), horizontal=True)
        hide_http = st.toggle("–°–∫—Ä—ã–≤–∞—Ç—å HTTP/tool-—É–∑–ª—ã", value=ss.hide_http)
        group_by = st.selectbox("–ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ (–¥–ª—è Aggregated)", ["agent_name", "agent_type"], index=(0 if ss.group_by=="agent_name" else 1))
        include_types = st.multiselect("–¢–∏–ø—ã –∞–≥–µ–Ω—Ç–æ–≤ (–¥–ª—è Aggregated)", 
                                       ['orchestrator','search','analysis','report','clarification','tool','custom'],
                                       default=ss.include_types)
        edge_width = st.slider("–¢–æ–ª—â–∏–Ω–∞ —Ä—ë–±–µ—Ä", 1.0, 5.0, ss.edge_width, step=0.2)
        arrow_size = st.slider("–†–∞–∑–º–µ—Ä —Å—Ç—Ä–µ–ª–æ–∫", 1.0, 4.0, ss.arrow_size, step=0.2)
        plot_height = st.slider("–í—ã—Å–æ—Ç–∞ –≥—Ä–∞—Ñ–∞ (px)", 400, 2000, ss.plot_height, step=50)
        label_font_size = st.slider("–†–∞–∑–º–µ—Ä —à—Ä–∏—Ñ—Ç–∞ –º–µ—Ç–æ–∫", 8, 20, ss.label_font_size, step=1)
        submit = st.form_submit_button("–ü–æ—Å—Ç—Ä–æ–∏—Ç—å –≥—Ä–∞—Ñ")

        if submit:
            if not ss.selected_file:
                st.warning("–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª.")
            else:
                with st.spinner("–ó–∞–≥—Ä—É–∂–∞–µ–º —Ç—Ä–∞—Å—Å—É‚Ä¶"):
                    t = MultiAgentTracer(session_id="streamlit_viewer")
                    with tempfile.NamedTemporaryFile(delete=False, suffix=".json") as tmp:
                        tmp.write(ss.uploaded_buffers[ss.selected_file]); tmp.flush(); t.load_traces(tmp.name)
                    os.unlink(tmp.name)

                ss.ma_tracer = t
                ss.graph_mode = graph_mode
                ss.hide_http = hide_http
                ss.group_by = group_by
                ss.include_types = include_types
                ss.edge_width = edge_width
                ss.arrow_size = arrow_size
                ss.plot_height = plot_height
                ss.label_font_size = label_font_size
                st.success("–ì—Ä–∞—Ñ –ø–æ—Å—Ç—Ä–æ–µ–Ω –ø–æ –Ω–æ–≤—ã–º –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º.")


# Tabs
tabs = st.tabs(["üï∏Ô∏è –ì—Ä–∞—Ñ –≤—ã–∑–æ–≤–æ–≤", "‚è±Ô∏è –î–∏–∞–≥—Ä–∞–º–º–∞ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏", "üìà –¢–∞–π–º–ª–∞–π–Ω", "ü§ñ LLM-–∞–Ω–∞–ª–∏—Ç–∏–∫"])

with tabs[0]:
    st.markdown('<div class="card">', unsafe_allow_html=True)
    st.subheader("–ì—Ä–∞—Ñ –≤—ã–∑–æ–≤–æ–≤")
    if ss.ma_tracer:
        fig_graph = ss.ma_tracer.get_call_graph_viz(
            mode=("aggregated" if ss.graph_mode == "Aggregated" else "invocations"),
            include_types=set(ss.include_types),
            hide_http_tools=ss.hide_http,
            group_by=ss.group_by,
            edge_width_scale=ss.edge_width,
            arrow_size=ss.arrow_size,
            height=ss.plot_height,
            label_font_size=ss.label_font_size,
        )
        fig_graph = polish_plotly(fig_graph)
        st.plotly_chart(
            fig_graph, use_container_width=True,
            config={"displaylogo": False, "scrollZoom": True,
                    "modeBarButtonsToRemove": ["toggleSpikelines","autoScale2d","lasso2d","select2d"]}
        )
        st.download_button(
            "‚¨áÔ∏è –°–∫–∞—á–∞—Ç—å –≥—Ä–∞—Ñ (HTML)",
            data=fig_graph.to_html(full_html=True, include_plotlyjs="cdn").encode("utf-8"),
            file_name="graph.html",
            mime="text/html",
        )
    else:
        st.info("–ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ç—Ä–∞—Å—Å—ã, –≤—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª –∏ –Ω–∞–∂–º–∏—Ç–µ ¬´–ü–æ—Å—Ç—Ä–æ–∏—Ç—å –≥—Ä–∞—Ñ¬ª.")
    st.markdown('</div>', unsafe_allow_html=True)

with tabs[1]:
    st.markdown('<div class="card">', unsafe_allow_html=True)
    st.subheader("–î–∏–∞–≥—Ä–∞–º–º–∞ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏")
    if ss.ma_tracer:
        fig_seq = polish_plotly(ss.ma_tracer.get_sequence_diagram())
        st.plotly_chart(fig_seq, use_container_width=True, config={"displaylogo": False})
        st.download_button(
            "‚¨áÔ∏è –°–∫–∞—á–∞—Ç—å –¥–∏–∞–≥—Ä–∞–º–º—É (HTML)",
            data=fig_seq.to_html(full_html=True, include_plotlyjs="cdn").encode("utf-8"),
            file_name="sequence.html",
            mime="text/html",
        )
    else:
        st.info("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –¥–∏–∞–≥—Ä–∞–º–º—ã. –ü–æ—Å—Ç—Ä–æ–π—Ç–µ –≥—Ä–∞—Ñ.")
    st.markdown('</div>', unsafe_allow_html=True)

with tabs[2]:
    st.markdown('<div class="card">', unsafe_allow_html=True)
    st.subheader("–¢–∞–π–º–ª–∞–π–Ω")
    if ss.ma_tracer:
        fig_tl = polish_plotly(ss.ma_tracer.get_timeline_viz())
        st.plotly_chart(fig_tl, use_container_width=True, config={"displaylogo": False})
        st.download_button(
            "‚¨áÔ∏è –°–∫–∞—á–∞—Ç—å —Ç–∞–π–º–ª–∞–π–Ω (HTML)",
            data=fig_tl.to_html(full_html=True, include_plotlyjs="cdn").encode("utf-8"),
            file_name="timeline.html",
            mime="text/html",
        )
    else:
        st.info("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ç–∞–π–º–ª–∞–π–Ω–∞. –ü–æ—Å—Ç—Ä–æ–π—Ç–µ –≥—Ä–∞—Ñ.")
    st.markdown('</div>', unsafe_allow_html=True)

with tabs[3]:
    st.markdown('<div class="card">', unsafe_allow_html=True)
    st.subheader("ü§ñ LLM-–∞–Ω–∞–ª–∏—Ç–∏–∫")
    st.caption(
        "–ó–∞–ø—É—Å—Ç–∏—Ç LLM-–∞–Ω–∞–ª–∏–∑ —Ç—Ä–∞—Å—Å—ã: —Ä–∞–∑–æ–±—å—ë—Ç –Ω–∞ —á–∞–Ω–∫–∏, –æ—Ü–µ–Ω–∏—Ç –∫–∞–∂–¥–æ–µ —Å–æ–±—ã—Ç–∏–µ, –ø—Ä–æ—Å—Ç–∞–≤–∏—Ç approve/reject –∏ –≤–µ—Ä–Ω—ë—Ç –Ω–æ–≤—ã–π JSON-—Ñ–∞–π–ª. "
        "–ú–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–∞—Å—Ç–æ–º LLM (OpenRouter/Qwen). –ï—Å–ª–∏ –Ω–µ—Ç ‚Äî –æ—Ñ—Ñ–ª–∞–π–Ω-—ç–≤—Ä–∏—Å—Ç–∏–∫–∞ (approve=success)."
    )

    use_llm = st.toggle("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å LLM (–µ—Å–ª–∏ –Ω–µ—Ç ‚Äî –æ—Ñ—Ñ–ª–∞–π–Ω —Ñ–æ–ª–±—ç–∫)", value=True)
    mdl = st.text_input("–ú–æ–¥–µ–ª—å LLM", value="gpt-4o-mini")
    base_url = st.text_input("Base URL (–¥–ª—è OpenRouter)", value="https://openrouter.ai/api/v1")
    api_key = st.text_input("API Key (–¥–ª—è OpenRouter –∏–ª–∏ OpenAI)", type="password")

    col_a, col_b = st.columns([1, 1])
    run_clicked = col_a.button("üîç –ó–∞–ø—É—Å—Ç–∏—Ç—å –∞–Ω–∞–ª–∏—Ç–∏–∫–∞ –Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω–æ–º —Ñ–∞–π–ª–µ")
    if run_clicked:
        if not ss.selected_file:
            st.warning("–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª.")
        else:
            try:
                base = ss.selected_file.rsplit(".json", 1)[0]
                new_name = f"{base}__assessed.json"
                # –µ—Å–ª–∏ —É–∂–µ –µ—Å—Ç—å ‚Äî –¥–æ–±–∞–≤–∏–º –ø—Ä–∏–ø–∏—Å–∫—É
                if new_name in ss.uploaded_buffers:
                    new_name = f"{base}__assessed_{int(time.time())}.json"

                with st.spinner("–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ª–æ–≥ –∏ —Ñ–æ—Ä–º–∏—Ä—É–µ–º –Ω–æ–≤—ã–π —Ñ–∞–π–ª‚Ä¶"):
                    new_bytes, approved_ids = analyze_trace_bytes(
                        ss.uploaded_buffers[ss.selected_file],
                        model_name=mdl,
                        base_url=base_url if base_url else None,
                        api_key=api_key if api_key else None,
                        use_llm=use_llm
                    )
                    # —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ ¬´–∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–µ¬ª
                    ss.uploaded_buffers[new_name] = new_bytes
                    ss.selected_file = new_name

                    # –†–∞—Å–ø–∞—Ä—Å–∏—Ç—å –Ω–æ–≤—ã–π JSON –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –º—ã—Å–ª–µ–π LLM
                    new_trace = json.loads(new_bytes.decode("utf-8"))
                    assessments = new_trace.get("assessments", {})
                    session_assessment = assessments.get("session_assessment", {})
                    assessed_events = assessments.get("events", [])

                    # –°–æ–±–∏—Ä–∞–µ–º tracer –ø–æ –Ω–æ–≤–æ–º—É —Ñ–∞–π–ª—É
                    t = MultiAgentTracer(session_id="streamlit_viewer")
                    with tempfile.NamedTemporaryFile(delete=False, suffix=".json") as tmp:
                        tmp.write(new_bytes); tmp.flush(); t.load_traces(tmp.name)
                    os.unlink(tmp.name)

                    # –ø—Ä–æ—Å—Ç–∞–≤–ª—è–µ–º approve —É–∑–ª–∞–º –ø–æ event_id
                    G = t.call_graph
                    for nid in G.nodes():
                        if nid in approved_ids:
                            G.nodes[nid]["approved"] = True

                    ss.ma_tracer = t

                # –ø–µ—Ä–µ—Ä–∏—Å–æ–≤—ã–≤–∞–µ–º –≤—Å–µ 3 –≥—Ä–∞—Ñ–∏–∫–∞
                fig_graph = polish_plotly(ss.ma_tracer.get_call_graph_viz(
                    mode=("aggregated" if ss.graph_mode == "Aggregated" else "invocations"),
                    include_types=set(ss.include_types),
                    hide_http_tools=ss.hide_http,
                    group_by=ss.group_by,
                    edge_width_scale=ss.edge_width,
                    arrow_size=ss.arrow_size,
                    height=ss.plot_height,
                    label_font_size=ss.label_font_size
                ))
                graph_slot = st.empty()
                seq_slot = st.empty()
                tl_slot = st.empty()
                
                graph_slot.empty(); graph_slot.plotly_chart(
                    fig_graph, use_container_width=True,
                    config={"displaylogo": False, "scrollZoom": True})

                fig_seq = polish_plotly(ss.ma_tracer.get_sequence_diagram())
                seq_slot.empty(); seq_slot.plotly_chart(fig_seq, use_container_width=True, config={"displaylogo": False})

                fig_tl = polish_plotly(ss.ma_tracer.get_timeline_viz())
                tl_slot.empty(); tl_slot.plotly_chart(fig_tl, use_container_width=True, config={"displaylogo": False})

                st.success(f"–ù–æ–≤—ã–π —Ñ–∞–π–ª —Å–æ–∑–¥–∞–Ω –∏ –ø–æ–¥–≥—Ä—É–∂–µ–Ω: {new_name}")
                col_b.download_button("‚¨áÔ∏è –°–∫–∞—á–∞—Ç—å –Ω–æ–≤—ã–π JSON", data=new_bytes, file_name=new_name, mime="application/json")

                # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –º—ã—Å–ª–µ–π LLM
                with st.expander("üß† –ú—ã—Å–ª–∏ LLM –æ —Å–µ—Å—Å–∏–∏", expanded=True):
                    st.text(session_assessment.get("summary", "–ù–µ—Ç summary –æ—Ç LLM."))
                    if session_assessment.get("major_issues"):
                        issues_df = pd.DataFrame(session_assessment["major_issues"])
                        st.dataframe(issues_df, use_container_width=True)

                with st.expander("üìã –î–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ —Å–æ–±—ã—Ç–∏–π LLM"):
                    if assessed_events:
                        events_df = pd.DataFrame([
                            {
                                "event_id": ev.get("event_id"),
                                "verdict": ev.get("assessment", {}).get("verdict"),
                                "reason": ev.get("assessment", {}).get("reason")
                            } for ev in assessed_events
                        ])
                        st.dataframe(events_df, use_container_width=True)
                    else:
                        st.info("–ù–µ—Ç –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ —Å–æ–±—ã—Ç–∏–π –æ—Ç LLM.")

                # –ü—Ä–æ—Å–º–æ—Ç—Ä –∏—Å—Ö–æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
                with st.expander("üìÑ –ò—Å—Ö–æ–¥–Ω—ã–π —Ñ–∞–π–ª (raw JSON)"):
                    original_bytes = ss.uploaded_buffers.get(base + ".json") or ss.uploaded_buffers[ss.selected_file]  # –ë–µ—Ä–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª –ø–æ –∏–º–µ–Ω–∏
                    if original_bytes:
                        original_trace = json.loads(original_bytes.decode("utf-8"))
                        st.json(original_trace, expanded=False)
                    else:
                        st.warning("–ò—Å—Ö–æ–¥–Ω—ã–π —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω.")

            except Exception as e:
                st.exception(e)

    st.markdown('</div>', unsafe_allow_html=True)