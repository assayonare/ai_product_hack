import sys, io, json, time
from datetime import datetime, timezone
from typing import Optional, List, Dict, Any

import pandas as pd
import matplotlib.pyplot as plt
import streamlit as st
import tempfile
from multiagent_tracer.multiagent_tracer import MultiAgentTracer

# –ï—Å–ª–∏ mini_langsmith –ª–µ–∂–∏—Ç —Ä—è–¥–æ–º —Å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ–º ‚Äî –º–æ–∂–Ω–æ –Ω–µ –¥–æ–±–∞–≤–ª—è—Ç—å –ø—É—Ç—å.
# –ï—Å–ª–∏ –≤—ã –ø–æ–ª–æ–∂–∏–ª–∏ –µ–≥–æ –≤ –¥—Ä—É–≥–æ–π –∫–∞—Ç–∞–ª–æ–≥, –¥–æ–±–∞–≤—å—Ç–µ sys.path.append("<–ø—É—Ç—å>")
# sys.path.append(".")

st.set_page_config(page_title="Tracing & Log Viz (by –º–ª)", layout="wide")

st.title("üõ∞Ô∏è Tracing & Log Viz (by –º–ª)")
st.caption("–õ—ë–≥–∫–∞—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è —Å–ø–∞–Ω–æ–≤ –∏ –ª–æ–≥–æ–≤ –¥–ª—è –≤–∞—à–µ–π –º—É–ª—å—Ç–∏–∞–≥–µ–Ω—Ç–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã")

st.header("üï∏Ô∏è MultiAgentTracer ‚Äî –≥—Ä–∞—Ñ—ã –∏ —Å–≤–æ–¥–∫–∏")

# --- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è (–æ–¥–∏–Ω —Ä–∞–∑) ---
ss = st.session_state
if "ma_tracer" not in ss:
    ss.ma_tracer = None
if "graph_mode" not in ss:
    ss.graph_mode = "Aggregated"
if "hide_http" not in ss:
    ss.hide_http = True
if "edge_width" not in ss:
    ss.edge_width = 2.2
if "arrow_size" not in ss:
    ss.arrow_size = 2.0
if "group_by" not in ss:
    ss.group_by = "agent_name"
if "include_types" not in ss:
    ss.include_types = ['orchestrator','search','analysis','report','clarification','tool']
if "limit_preview" not in ss:
    ss.limit_preview = 300

# --- –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–æ–≤ —Ç—Ä–∞—Å—Å ---
uploaded_ma_traces = st.file_uploader(
    "–ó–∞–≥—Ä—É–∑–∏—Ç–µ –æ–¥–∏–Ω –∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ñ–∞–π–ª–æ–≤ —Ç—Ä–∞—Å—Å (JSON) –æ—Ç MultiAgentTracer",
    type=["json"],
    accept_multiple_files=True,
    key="ma_traces_files",
)

# –ö–Ω–æ–ø–∫–∞ ¬´–∑–∞–≥—Ä—É–∑–∏—Ç—å/–ø–µ—Ä–µ—Å—Ç—Ä–æ–∏—Ç—å¬ª —Å–æ–∑–¥–∞—ë—Ç/–æ–±–Ω–æ–≤–ª—è–µ—Ç tracer –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –µ–≥–æ –≤ session_state
if st.button("–ó–∞–≥—Ä—É–∑–∏—Ç—å/–ø–µ—Ä–µ—Å—Ç—Ä–æ–∏—Ç—å –≥—Ä–∞—Ñ"):
    if not uploaded_ma_traces:
        st.warning("–°–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω JSON-—Ñ–∞–π–ª —Ç—Ä–∞—Å—Å.")
    else:
        t = MultiAgentTracer(session_id="streamlit_viewer")
        import tempfile
        for uf in uploaded_ma_traces:
            with tempfile.NamedTemporaryFile(delete=False, suffix=".json") as tmp:
                tmp.write(uf.getvalue())
                tmp.flush()
                t.load_traces(tmp.name)   # –≤–Ω—É—Ç—Ä–∏ load_traces —É–∂–µ –∏–¥—ë—Ç rebuild –≥—Ä–∞—Ñ–∞
        ss.ma_tracer = t
        st.success("–¢—Ä–∞—Å—Å—ã –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏ –≥—Ä–∞—Ñ –ø–æ—Å—Ç—Ä–æ–µ–Ω.")

# --- –£–ø—Ä–∞–≤–ª—è—é—â–∏–µ —ç–ª–µ–º–µ–Ω—Ç—ã –≥—Ä–∞—Ñ–∞ (–≤—Å–µ–≥–¥–∞ –≤–∏–¥–Ω—ã; –∑–Ω–∞—á–µ–Ω–∏–µ —Ö—Ä–∞–Ω–∏—Ç—Å—è –≤ session_state) ---
st.subheader("–ì—Ä–∞—Ñ –≤—ã–∑–æ–≤–æ–≤")

cols = st.columns([1.2, 1, 1, 1.2])
modes = ["Aggregated", "Invocations"]

cols[0].radio(
    "–†–µ–∂–∏–º –≥—Ä–∞—Ñ–∞",
    modes,
    horizontal=True,
    key="graph_mode",
    index=modes.index(ss.graph_mode) if ss.graph_mode in modes else 0,
)
cols[1].toggle("–°–∫—Ä—ã—Ç—å HTTP-–∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã", key="hide_http", value=ss.hide_http)
cols[2].slider("–¢–æ–ª—â–∏–Ω–∞ —Å—Ç—Ä–µ–ª–æ–∫", 1.0, 6.0, key="edge_width", value=ss.edge_width, step=0.2)
cols[3].slider("–†–∞–∑–º–µ—Ä –≥–æ–ª–æ–≤–∫–∏ —Å—Ç—Ä–µ–ª–∫–∏", 1.0, 3.5, key="arrow_size", value=ss.arrow_size, step=0.1)

c5, c6 = st.columns([1, 1])
c5.slider("–í—ã—Å–æ—Ç–∞ –≥—Ä–∞—Ñ–∞, px", 500, 1500, key="plot_height", value=ss.get("plot_height", 950), step=50)
c6.slider("–†–∞–∑–º–µ—Ä —à—Ä–∏—Ñ—Ç–∞ –º–µ—Ç–æ–∫", 9, 20, key="label_font_size", value=ss.get("label_font_size", 12), step=1)

group_opts = ["agent_name", "agent_type"]
st.selectbox(
    "–ê–≥—Ä–µ–≥–∏—Ä–æ–≤–∞—Ç—å –ø–æ (–¥–ª—è Aggregated)",
    group_opts,
    key="group_by",
    index=group_opts.index(ss.group_by) if ss.group_by in group_opts else 0,
)

type_opts = ['orchestrator','search','analysis','report','clarification','tool','custom']
st.multiselect(
    "–¢–∏–ø—ã –∞–≥–µ–Ω—Ç–æ–≤ (–¥–ª—è Aggregated)",
    options=type_opts,
    default=ss.include_types,
    key="include_types",
)

st.slider(
    "–û–±—Ä–µ–∑–∞—Ç—å –ø—Ä–µ–≤—å—é —Ç–µ–∫—Å—Ç–æ–≤ –¥–æ, —Å–∏–º–≤.",
    50, 1000,
    key="limit_preview",
    value=ss.limit_preview,
    step=50,
)

# --- –†–∏—Å—É–µ–º –≥—Ä–∞—Ñ—ã/–¥–∏–∞–≥—Ä–∞–º–º—ã, –µ—Å–ª–∏ —Ç—Ä–∞—Å—Å–µ—Ä –∑–∞–≥—Ä—É–∂–µ–Ω ---
if ss.ma_tracer:
    fig_graph = ss.ma_tracer.get_call_graph_viz(
        mode=("aggregated" if ss.graph_mode == "Aggregated" else "invocations"),
        include_types=set(ss.include_types),
        hide_http_tools=ss.hide_http,
        group_by=ss.group_by,
        edge_width_scale=ss.edge_width,
        arrow_size=ss.arrow_size,
        height=ss.plot_height,              # <<< –Ω–æ–≤–∞—è –≤—ã—Å–æ—Ç–∞
        label_font_size=ss.label_font_size  # <<< —Ä–∞–∑–º–µ—Ä —à—Ä–∏—Ñ—Ç–∞ –º–µ—Ç–æ–∫
    )
    st.plotly_chart(
        fig_graph,
        use_container_width=True,
        config={
            "displaylogo": False,
            "displayModeBar": True,   # <<< –ø–∞–Ω–µ–ª—å –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–æ–≤
            "scrollZoom": True,       # <<< zoom –∫–æ–ª–µ—Å–∏–∫–æ–º
        },
    )

    st.subheader("–î–∏–∞–≥—Ä–∞–º–º–∞ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç–∏")
    fig_seq = ss.ma_tracer.get_sequence_diagram()
    st.plotly_chart(
        fig_seq,
        use_container_width=True,
        config={"displaylogo": False, "displayModeBar": True, "scrollZoom": True},
    )

    st.subheader("–¢–∞–π–º–ª–∞–π–Ω")
    fig_tl = ss.ma_tracer.get_timeline_viz()
    st.plotly_chart(
        fig_tl,
        use_container_width=True,
        config={"displaylogo": False, "displayModeBar": True, "scrollZoom": True},
    )
else:
    st.info("–ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ç—Ä–∞—Å—Å—ã –∏ –Ω–∞–∂–º–∏—Ç–µ ¬´–ó–∞–≥—Ä—É–∑–∏—Ç—å/–ø–µ—Ä–µ—Å—Ç—Ä–æ–∏—Ç—å –≥—Ä–∞—Ñ¬ª.")
